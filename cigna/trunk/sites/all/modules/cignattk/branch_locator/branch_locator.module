<?php
/**
 * @file
 * Code for the Google Store Locator feature.
 */

include_once 'branch_locator.features.inc';

function branch_locator_init(){
    //drupal_add_js(drupal_get_path('module','branch_locator').'/js/branch_locator_custom.js');
}
/**
 * Implements hook_menu().
 *
 * By using a render array as the page callback for this menu item then we
 * can give the map and panel elements as much room as possible to breathe.
 */
function branch_locator_menu() {
  /*$items[variable_get('bl_display_path', 'branch_locator')] = array(
    'title' => 'Branch Locator',
    'description' => 'Branch locator map using Google Store Location Library',
    'page callback' => 'branch_locator_default_page',
    'access arguments' => array('access content'),

  );*/
  $items['admin/config/search/branch_locator'] = array(
    'title' => 'Branch Locator',
    'description' => 'Branch Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('branch_locator_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'management',
    'weight' => 1,
  );
  return $items;
}

/**
 * Create admin form for Google Store Locator.
 */
function branch_locator_admin_form($form, &$form_state) {

  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Branch Locator'),
  );
  $form['branch_locator']['bl_json_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Where is the JSON file located?'),
    '#default_value' => variable_get('bl_json_path', 'branch-locator/json'),
    '#required' => TRUE,
  );
  $form['branch_locator']['bl_display_path'] = array(
    '#type' => 'textfield',
    '#title' => t('What is the desired path for the store locator?'),
    '#default_value' => variable_get('bl_display_path', 'branch_locator'),
    '#description' => t('By default it will be served from /branch_locator'),
    '#required' => TRUE,
  );
  $form['branch_locator']['bl_search_label'] = array(
    '#type' => 'textfield',
    '#title' => t('What should the search label say?'),
    '#description' => t('The label shown above the search input box.'),
    '#default_value' => variable_get('bl_search_label', 'Branch Locator'),
    '#size' => 30,
    '#required' => TRUE,
  );
  $form['branch_locator']['gsl_items_per_panel'] = array(
    '#type' => 'textfield',
    '#title' => t('How many stores should show in the panel?'),
    '#description' => t('The panel shows the X closest locations where X is the value entered above.'),
    '#default_value' => variable_get('gsl_items_per_panel', '10'),
    '#size' => 5,
    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => TRUE,
  );
  $form['branch_locator']['gsl_map_lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Map center point (Latitude)'),
    '#default_value' => variable_get('gsl_map_lat', '40'),
    '#size' => 5,
    '#element_validate' => array('element_validate_number'),
    '#required' => TRUE,
  );
  $form['branch_locator']['gsl_map_long'] = array(
    '#type' => 'textfield',
    '#title' => t('Map center point (Longitude)'),
    '#default_value' => variable_get('gsl_map_long', '-100'),
    '#size' => 5,
    '#element_validate' => array('element_validate_number'),
    '#required' => TRUE,
  );
  $form['branch_locator']['gsl_map_zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Default zoom level'),
    '#default_value' => variable_get('gsl_map_zoom', '4'),
    '#size' => 5,
    '#element_validate' => array('element_validate_integer'),
    '#description' => t('Enter a value from 0-21 with 0 being the farthest distance from the earth'),
    '#required' => TRUE,
  );
  $form['branch_locator']['gsl_loc_aware'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Map with Location Awareness'),
    '#description' => t('This allows users to share their location via the browser, and then center the map view on that location'),
    '#default_value' => variable_get('gsl_loc_aware', FALSE),
  );
  $form['branch_locator']['gsl_loc_aware_zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Location Awareness Zoom Level'),
    '#element_validate' => array('element_validate_integer'),
    '#size' => 5,
    '#default_value' => variable_get('gsl_loc_aware_zoom', NULL),
    '#states' => array(
      'visible' => array(
        ':input[name="gsl_loc_aware"]' => array('checked' => TRUE)),
      'required' => array(
        ':input[name="gsl_loc_aware"]' => array('checked' => TRUE)),
    )
  );

  $file_path = drupal_get_path('module', 'file');

  if (module_exists('file')) {
    $form['branch_locator']['gsl_marker_icon'] = array(
      '#title' => t('Marker Icon'),
      '#type' => 'managed_file',
      '#description' => t('The uploaded image will be displayed as the store location icon in the map.'),
      '#default_value' => variable_get('gsl_marker_icon', ''),
      '#upload_location' => 'public://gsl_marker_icon/',
    );
  }
  else {
    $form['branch_locator']['gsl_marker_icon'] = array(
      '#markup' => '<h6>' . t('To enable the custom marker icon feature please install the file module') . '</h6>',
    );
  }
  $form = system_settings_form($form);
  $form['#submit'][] = 'branch_locator_admin_form_submit';

  return $form;
}


/**
 * Callback function for /store_locator in hook_menu().
 */
/*function branch_locator_default_page() {

  $data_path = variable_get('bl_json_path', 'branch_locator/json');
  $map_zoom = variable_get('gsl_map_zoom', '4');
  $map_long = variable_get('gsl_map_long', '-100');
  $map_lat = variable_get('gsl_map_lat', '40');
  $items_per_panel = variable_get('gsl_items_per_panel', 10);
  $loc_aware = variable_get('gsl_loc_aware', '0');
  $search_label = variable_get('gsl_search_label', "Where are you?");

  $variables = array(
    'data_path' => $data_path,
    'map_zoom' => $map_zoom,
    'map_long' => $map_long,
    'map_lat' => $map_lat,
    'items_per_panel' => $items_per_panel,
    'loc_aware' => $loc_aware,
    'search_label' => $search_label,
  );

  $marker_icon_fid = variable_get('gsl_marker_icon', '');

  //add the zoom setting if location awareness is enabled.
  if($loc_aware == '1') {
    $variables['loc_aware_zoom'] = variable_get('gsl_loc_aware_zoom');
  }

  if (!empty($marker_icon_fid)) {
    $marker_file = file_load($marker_icon_fid);
    $variables['marker_path'] = $marker_file->uri;
  }

  return theme('branch_locator_contents', $variables);
}*/

/**
 * Default implementation of the branch_locator_contents theme hook.
 *
 * Builds the renderable array that attaches all necessary js files to the head
 * section of the page and generates the map and panel elements.
 */
function theme_branch_locator_contents($variables) {
  $gsl_map_id = drupal_html_id('google-store-locator-map-container');

  $settings = array(
    'datapath' => $variables['data_path'],
    'mapzoom' => intval($variables['map_zoom']),
    'maplong' => $variables['map_long'],
    'maplat' => $variables['map_lat'],
    'search_label' => $variables['search_label'],
    'empty_stores_msg' => isset($variables['empty_stores_msg']) ?
    $variables['empty_stores_msg'] :
    t('There are no stores available.'),
  );

  if (!empty($variables['items_per_panel'])) {
    $settings['items_per_panel'] = $variables['items_per_panel'];
  }

  if (!empty($variables['marker_path'])) {
    $settings['marker_url'] = file_create_url($variables['marker_path']);
  }

  $output = array(
    'google_maps_api' => array(
      '#attached' => array(
        'js' => array('//maps.googleapis.com/maps/api/js?sensor=false&libraries=places' => array('type' => 'external')),
      ),
    ),
    'compiled_js' => array(
      '#attached' => array(
        'js' => array(libraries_get_path('storelocator') . '/js/store-locator.compiled.js'),
      ),
    ),
    'build_js' => array(
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'branch_locator') . '/js/branch_locator.js'),
      ),
    ),
    'store_locator_sheet' => array(
      '#attached' => array(
        'css' => array(libraries_get_path('storelocator') . '/css/storelocator.css'),
      ),
    ),

    'elements_sheet' => array(
      '#attached' => array(
        'css' => array(drupal_get_path('module', 'branch_locator') . '/theme/branch_locator.css'),
      ),
    ),

    'gsl_map_container' => array(
      '#type' => 'markup',
      '#prefix' => '<div id="' . $gsl_map_id . '" class="google-store-locator-map-container">',
      'gsl_panel' => array(
        '#markup' => '<div class="google-store-locator-panel"></div>',
      ),
      'gsl_map' => array(
        '#markup' => '<div class="google-store-locator-map"></div>',
      ),
      '#suffix' => '</div>',
    ),
  );

  //Add the location awareness js if it's enabled.
  if(!empty($variables['loc_aware'])) {
    $output['loc_aware_js'] = array(
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'branch_locator') . '/js/branch_locator_loc_aware.js'),
      )
    );
    $settings['loc_aware_zoom'] = (int)$variables['loc_aware_zoom'];
  }

  drupal_add_js(array(
    'gsl' => array(
      $gsl_map_id => $settings,
    ),
  ), 'setting');

  return $output;
}

/**
 * Implements hook_theme().
 *
 * Registers this module's themeable functions
 */
function branch_locator_theme() {
  // Returns an associative array of theme hook information.
  return array(
  // The outer array keys are the names of the theme functions, and the values
  // are arrays containing information about the hook.
    'branch_locator_contents' => array(
     // Keys=names of the variables passed to the themable function,
     // value=default value of the variable if none is provided.
      'variables' => array(
        'data_path' => NULL,
        'map_zoom' => NULL,
        'map_long' => NULL,
        'map_lat' => NULL,
      ),
    ),
  );
}

/**
 * Submit callback for branch_locator_admin_form.
 */
function branch_locator_admin_form_submit($form, &$form_state) {
  if ($form['branch_locator']['gsl_marker_icon']['#default_value'] != 0) {
    if ($form['branch_locator']['gsl_marker_icon']['#default_value'] != $form_state['values']['gsl_marker_icon']) {
      $old_file = file_load($form['branch_locator']['gsl_marker_icon']['#default_value']);
      file_delete($old_file);
    }
  }
  if ($form_state['values']['gsl_marker_icon'] != 0) {
    // Load the file via file.fid.
    $file = file_load($form_state['values']['gsl_marker_icon']);
    // Change status to permanent.
    $file->status = FILE_STATUS_PERMANENT;
    // Save.
    file_save($file);
    file_usage_add($file, 'branch_locator', 'branch_locator', $file->fid);
  }
  menu_rebuild();
  $form_state['redirect'] = variable_get('bl_display_path', 'branch_locator');
}

/**
 * Form validator for branch_locator_admin_form.
 */
function branch_locator_admin_form_validate($form, &$form_state) {

  //Force 'gsl_loc_aware_zoom' to pass #element_validate if gsl_loc_aware isn't enabled
  if(!empty($form_state['values']['gsl_loc_aware'])) {
    if(empty($form_state['values']['gsl_loc_aware_zoom'])){
      form_set_error('gsl_loc_aware_zoom',
    t('With Location Awareness enabled you must enter a zoom level!'));
    }
  }

  if ($form_state['values']['gsl_map_zoom'] > 21 ||
      $form_state['values']['gsl_map_zoom'] < 0) {
    form_set_error('gsl_map_zoom',
    t('Please enter a zoom level between 0 and 21.'));
  }
  if ($form_state['values']['gsl_map_long'] > 180 ||
      $form_state['values']['gsl_map_long'] < -180) {
    form_set_error('gsl_map_long',
    t('Please enter a longitude between -180 and 180'));
  }
  if ($form_state['values']['gsl_map_lat'] > 90 ||
      $form_state['values']['gsl_map_lat'] < -90) {
    form_set_error('gsl_map_lat',
    t('Please enter a latitude between -90 and 90'));
  }
}
